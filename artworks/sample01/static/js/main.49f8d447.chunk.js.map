{"version":3,"sources":["styles/page/scene01.module.scss","reportWebVitals.ts","utils/animation/model.ts","utils/animation/index.ts","utils/animation/parser.ts","sequences/sequence01.tsx","sequences/sequence02.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Animation","row","defRow","_x","_y","_rotate","_scale","_anchor","this","x","y","rotate","scale","anchor","rows","size","length","animations","Array","i","parseRowDatas","createAnimationList","parseAnimation","short","progress","anis","curAni","nextAni","absProgress","Math","abs","cur","next","moveX","parser","moveY","parseStyle","ani","baseW","baseH","stageW","stageH","rateW","rateH","toFixed","transform","transformOrigin","join","cxScene","classNames","bind","styleScene01","Sequence01","scene","width","height","registAction","useState","setShort","endScene","useMemo","aniInfo","shortDest","startScene","containerClass","stageClass","animtions","cuts","container","style","baseWith","baseHeight","useEffect","current","isFinish","nextShort","setTimeout","duration","className","Sequence02","App","document","body","clientWidth","setWidth","clientHeight","setHeight","setScene","setProgress","actionFlag","useRef","eventFalg","actionCnt","wheelStop","isMaxScene","animation","totalScene","isMinScene","moveNextScene","useCallback","movePrevScene","regist","renderProgress","delta","deletaSensitive","actionStart","wheelCallback","e","window","requestAnimationFrame","deltaY","clearTimeout","resize","addEventListener","removeEventListener","onWheel","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49f8d447.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"scene01_container__1T_E7\",\"stage\":\"scene01_stage__dsnc2\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export interface AnimationRowData {\n  x?: number;\n  y?: number;\n  rotate?: number;\n  scale?: number;\n  anchor?: string;\n}\n\nclass Animation {\n  private _x: number;\n\n  private _y: number;\n\n  private _rotate: number;\n\n  private _scale: number;\n\n  private _anchor: string;\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get rotate() {\n    return this._rotate;\n  }\n\n  get scale() {\n    return this._scale;\n  }\n\n  get anchor() {\n    return this._anchor;\n  }\n\n  constructor(row: AnimationRowData, defRow?: Animation) {\n    this._x = row.x ?? defRow?.x ?? 0;\n    this._y = row.y ?? defRow?.y ?? 0;\n    this._rotate = row.rotate ?? defRow?.rotate ?? 0;\n    this._scale = row.scale ?? defRow?.scale ?? 1;\n    this._anchor = row.anchor ?? defRow?.anchor ?? 'center center';\n  }\n\n  static createAnimationList(rows: AnimationRowData[]) {\n    const size = rows.length;\n    const animations = Array<Animation>(size);\n\n    if (size > 0) {\n      // 존재하지 않는 Animation Row Data는 이전 Data의 것을 그대로 사용합니다.\n      animations[0] = new Animation(rows[0]);\n      for (let i = 1; i < size; i += 1) {\n        animations[i] = new Animation(rows[i], animations[i - 1]);\n      }\n    }\n\n    return animations;\n  }\n}\n\nexport default Animation;\n","import Animation from 'utils/animation/model';\nimport * as parser from 'utils/animation/parser';\n\nexport const parseRowDatas = Animation.createAnimationList;\n\n// 이전 스타일 객체에서 Short가 진행된 만큼 변화가 반영된 Style 객체를 반환합니다.\nexport function parseAnimation(short: number, progress: number, anis: Animation[]) {\n  if (short <= 0 && progress <= 0) return anis[0]; // 더이상 뒤로갈 에니메이션이 없는 경우\n  if (short >= anis.length - 1 && progress >= 0) return anis[anis.length - 1]; // 더이상 앞으로갈 에니메이션이 없는 경우\n  if (progress === 0) return anis[short]; // progress가 0인 경우\n\n  const curAni = anis[short];\n  const nextAni = progress >= 0 ? anis[short + 1] : anis[short - 1];\n  const absProgress = Math.abs(progress);\n\n  const x = parser.parseX(curAni, nextAni, absProgress);\n  const y = parser.parseY(curAni, nextAni, absProgress);\n  const rotate = parser.parseRotate(curAni, nextAni, absProgress);\n  const scale = parser.parseScale(curAni, nextAni, absProgress);\n  const anchor = parser.parseAnchor(curAni, nextAni, absProgress);\n\n  return new Animation({ x, y, rotate, scale, anchor });\n}\n\n// 스타일 객체를 React Component Style Object로 파싱합니다.\nexport function parseStyle(ani: Animation, baseW: number, baseH: number, stageW: number, stageH: number) {\n  const rateW = stageW / baseW;\n  const rateH = stageH / baseH;\n\n  const x = (ani.x * rateW).toFixed(2);\n  const y = (ani.y * rateH).toFixed(2);\n\n  const transform = [`translate(${x}px, ${y}px)`, `rotate(${ani.rotate}deg)`, `scale(${ani.scale}, ${ani.scale})`];\n\n  return {\n    transformOrigin: ani.anchor,\n    transform: transform.join(' '),\n  };\n}\n\nexport function neadAsync(short: number, progress: number, asyncs?: boolean[]) {\n  if (!asyncs) return false; // async 배열이 준비되지 않으면 무조건 True입니다.\n  if (short === 0 && progress <= 0) return false; // 더이상 뒤로갈 에니메이션이 없는 경우\n  if (short === asyncs.length - 1 && progress >= 0) return false; // 더이상 앞으로갈 에니메이션이 없는 경우\n  return progress >= 0 ? asyncs[short + 1] : asyncs[short - 1];\n}\n","import Animation from 'utils/animation/model';\n\n// 변화를 반영한 X 값을 반환합니다.\nexport function parseX(cur: Animation, next: Animation, progress: number) {\n  const moveX = ((next.x - cur.x) * progress) / 100;\n  return cur.x + moveX;\n}\n\n// 변화를 반영한 Y 값을 반환합니다.\nexport function parseY(cur: Animation, next: Animation, progress: number) {\n  const moveY = ((next.y - cur.y) * progress) / 100;\n  return cur.y + moveY;\n}\n\n// 변화를 반영한 Rotate 값을 반환합니다.\nexport function parseRotate(cur: Animation, next: Animation, progress: number) {\n  const rotate = ((next.rotate - cur.rotate) * progress) / 100;\n  return cur.rotate + rotate;\n}\n\n// 변화를 반영한 Scale 값을 반환합니다.\nexport function parseScale(cur: Animation, next: Animation, progress: number) {\n  const scale = ((next.scale - cur.scale) * progress) / 100;\n  return cur.scale + scale;\n}\n\n// 변화를 반영한 Anchor 값을 반환합니다.\nexport function parseAnchor(cur: Animation, next: Animation, progress: number) {\n  return progress >= 0 ? cur.anchor : next.anchor;\n}\n","import React, { useMemo, useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { parseRowDatas, parseAnimation, parseStyle } from 'utils/animation';\nimport aniInfo from 'statics/animation/sequence01.json';\nimport styleScene01 from 'styles/page/scene01.module.scss';\n\nconst cxScene = classNames.bind(styleScene01);\n\ninterface Sequence01rops {\n  scene: number;\n  progress: number;\n  width: number;\n  height: number;\n  registAction: (regist: boolean) => void;\n}\n\nfunction Sequence01({ scene, progress, width, height, registAction }: Sequence01rops) {\n  const [short, setShort] = useState(0); // 현재 Sequence Short 번호\n  const endScene = useMemo(() => aniInfo.shortDest.length + aniInfo.startScene, []); // 더이상 진행할 내용일 없는 Scene 번호\n\n  const containerClass = useMemo(() => cxScene('container'), []);\n  const stageClass = useMemo(() => cxScene('stage'), []);\n\n  // Animation 정보를 활용해 Transform Style Object를 만듭니다.\n  const animtions = useMemo(() => parseRowDatas(aniInfo.cuts.container), []);\n  const style = useMemo(() => {\n    const { baseWith, baseHeight } = aniInfo;\n    const ani = parseAnimation(short, progress, animtions);\n    return parseStyle(ani, baseWith, baseHeight, width, height);\n  }, [animtions, short, progress, width, height]);\n\n  // Scene에 해당하는 목표 Short 번호에 맞게 다음 Short 번호를 설정합니다.\n  useEffect(() => {\n    if (scene < endScene && scene >= aniInfo.startScene) {\n      const current = scene - aniInfo.startScene;\n      const shortDest = aniInfo.shortDest[current];\n\n      if (short !== shortDest) {\n        // Short의 변경이 필요하다면 Action 실행을 등록합니다.\n        const shortNext = shortDest > short ? short + 1 : shortDest;\n        setShort(shortNext);\n        registAction(true);\n      }\n    }\n  }, [scene, endScene]);\n\n  // Short가 변경되면 Transalte 동작 후 목표 Short 번호에 맞게 Actrion을 진행합니다.\n  useEffect(() => {\n    const shortDest = aniInfo.shortDest[scene - 1];\n    const isFinish = shortDest === short;\n    const nextShort = short + 1;\n\n    setTimeout(() => {\n      // Short가 목표치에 도달하면 Action을 종료합니다.\n      if (isFinish) registAction(false);\n      // Short가 목쵸피에 도달하지 목하면 다음 short로 이동합니다.\n      else setShort(nextShort);\n    }, aniInfo.duration);\n  }, [short]);\n\n  return (\n    <div className={containerClass} style={style}>\n      <div className={stageClass} />\n    </div>\n  );\n}\n\nexport default Sequence01;\n","import React, { useMemo, useEffect, useState } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { parseRowDatas, parseAnimation, parseStyle } from 'utils/animation';\nimport aniInfo from 'statics/animation/sequence02.json';\nimport styleScene01 from 'styles/page/scene01.module.scss';\n\nconst cxScene = classNames.bind(styleScene01);\n\ninterface Sequence02rops {\n  scene: number;\n  progress: number;\n  width: number;\n  height: number;\n  registAction: (regist: boolean) => void;\n}\n\nfunction Sequence02({ scene, progress, width, height, registAction }: Sequence02rops) {\n  const [short, setShort] = useState(0); // 현재 Sequence Short 번호\n  const endScene = useMemo(() => aniInfo.shortDest.length + aniInfo.startScene, []); // 더이상 진행할 내용일 없는 Scene 번호\n\n  const containerClass = useMemo(() => cxScene('container'), []);\n  const stageClass = useMemo(() => cxScene('stage'), []);\n\n  // Animation 정보를 활용해 Transform Style Object를 만듭니다.\n  const animtions = useMemo(() => parseRowDatas(aniInfo.cuts.container), []);\n  const style = useMemo(() => {\n    const { baseWith, baseHeight } = aniInfo;\n    const ani = parseAnimation(short, progress, animtions);\n    return parseStyle(ani, baseWith, baseHeight, width, height);\n  }, [animtions, short, progress, width, height]);\n\n  // Scene에 해당하는 목표 Short 번호에 맞게 다음 Short 번호를 설정합니다.\n  useEffect(() => {\n    if (scene < endScene && scene >= aniInfo.startScene) {\n      const current = scene - aniInfo.startScene;\n      const shortDest = aniInfo.shortDest[current];\n\n      if (short !== shortDest) {\n        // Short의 변경이 필요하다면 Action 실행을 등록합니다.\n        const shortNext = shortDest > short ? short + 1 : shortDest;\n        setShort(shortNext);\n        registAction(true);\n      }\n    }\n  }, [scene, endScene]);\n\n  // Short가 변경되면 Transalte 동작 후 목표 Short 번호에 맞게 Actrion을 진행합니다.\n  useEffect(() => {\n    const shortDest = aniInfo.shortDest[scene - 1];\n    const isFinish = shortDest === short;\n    const nextShort = short + 1;\n\n    setTimeout(() => {\n      // Short가 목표치에 도달하면 Action을 종료합니다.\n      if (isFinish) registAction(false);\n      // Short가 목쵸피에 도달하지 목하면 다음 short로 이동합니다.\n      else setShort(nextShort);\n    }, aniInfo.duration);\n  }, [short]);\n\n  return (\n    <div className={containerClass} style={style}>\n      <div className={stageClass} />\n    </div>\n  );\n}\n\nexport default Sequence02;\n","import React, { useState, useCallback, useRef, useMemo, useEffect } from 'react';\n\nimport Sequence01 from 'sequences/sequence01';\nimport Sequence02 from 'sequences/sequence02';\nimport animation from 'statics/animation/index.json';\nimport 'styles/main.scss';\n\nfunction App() {\n  const [width, setWidth] = useState(document.body.clientWidth); // Application Width\n  const [height, setHeight] = useState(document.body.clientHeight); // Application Height\n\n  const [scene, setScene] = useState(1); // 현재 Scene 번호\n  const [progress, setProgress] = useState(0); // 현재 Scene 진행률\n  const actionFlag = useRef(false); // 앤션 진행 플래그\n  const eventFalg = useRef(false); // 이벤트 디바운스를 플래그\n\n  const actionCnt = useRef<number>(0); // 현재 Action 수행중인 Sequence 갯수\n  const wheelStop = useRef<ReturnType<typeof setTimeout>>(); // 마우스 휠이 멈추면 발생하는 Timeout Event Handler\n  const isMaxScene = useMemo(() => scene === animation.totalScene, [scene]); // 현재 Scene이 마지막인지 여부\n  const isMinScene = useMemo(() => scene === 1, [scene]); // 현재 Scene이 처음인지 여부\n\n  // 다음 Scene을 진행합니다.\n  const moveNextScene = useCallback(() => {\n    if (!isMaxScene) setScene(scene + 1);\n    if (progress) setProgress(0);\n  }, [isMaxScene, scene, progress]);\n\n  // 이전 Scene을 진행합니다.\n  const movePrevScene = useCallback(() => {\n    if (!isMinScene) setScene(scene - 1);\n    if (progress) setProgress(0);\n  }, [isMinScene, scene, progress]);\n\n  // Sequence의 Action 실행/종료를 보고 받습니다.\n  const registAction = useCallback((regist: boolean) => {\n    if (regist) actionCnt.current += 1;\n    else if (actionCnt.current > 0) actionCnt.current -= 1;\n\n    if (actionCnt.current === 0) actionFlag.current = false;\n    else if (actionFlag.current === false) actionFlag.current = true;\n  }, []);\n\n  // 진행률의 변동을 반영합니다.\n  const renderProgress = useCallback(\n    (delta: number) => {\n      // 더이상 진행할 쇼트가 없으면 멈춥니다.\n      const next = progress + delta * animation.deletaSensitive;\n      if (next > 0 && isMaxScene) return;\n      if (next < 0 && isMinScene) return;\n\n      // 진행률이 일장 값 이상 도달하면 다음 Scene으로 이동합니다.\n      if (Math.abs(next) >= animation.actionStart) {\n        actionFlag.current = true;\n        if (next > 0) moveNextScene();\n        else movePrevScene();\n      } else {\n        setProgress(next);\n      }\n    },\n    [progress, isMaxScene, isMinScene],\n  );\n\n  // Wheel의 동작을 처리합니다.\n  const wheelCallback = useCallback(\n    (e: React.WheelEvent<HTMLDivElement>) => {\n      // Flag가 있거나, 수직 변동 값이 없으면 진행하지 않습니다.\n      if (eventFalg.current || actionFlag.current) return;\n\n      window.requestAnimationFrame(() => {\n        // 마우스 움직임을 Process에 반여하고, Event Flag는 제거합니다.\n        eventFalg.current = false;\n        renderProgress(e.deltaY);\n\n        // Action 상태가 아닌데 Wheel이 멈추면 Process를 초기화합니다.\n        if (wheelStop.current) clearTimeout(wheelStop.current);\n        wheelStop.current = setTimeout(() => {\n          if (!actionFlag.current) setProgress(0);\n        }, 100);\n      });\n\n      eventFalg.current = true;\n    },\n    [renderProgress],\n  );\n\n  // Window 사이즈가 조정되면 Sequence Container들을 resize합니다.\n  const resize = useCallback(() => {\n    setWidth(document.body.clientWidth);\n    setHeight(document.body.clientHeight);\n  }, []);\n\n  useEffect(() => {\n    resize();\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, [resize]);\n\n  return (\n    <div className=\"App\" onWheel={wheelCallback}>\n      <Sequence01 scene={scene} progress={progress} width={width} height={height} registAction={registAction} />\n      <Sequence02 scene={scene} progress={progress} width={width} height={height} registAction={registAction} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}