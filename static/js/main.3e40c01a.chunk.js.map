{"version":3,"sources":["styles/component/card-list.module.scss","styles/base/typography.module.scss","styles/base/base.module.scss","styles/layout/header.module.scss","styles/layout/body.module.scss","modules/store/action/artwork.ts","modules/hook/useArtwork.ts","constant/path.ts","constant/error.ts","constant/loading.ts","constant/index.ts","constant/config.ts","section/header.tsx","modules/hook/useDynamicGrid.ts","modules/hook/useResizeDetector.ts","modules/util/heap.ts","components/card-list/thumbnail.tsx","modules/util/date.ts","components/card-list/content.tsx","components/card-list/keywords.tsx","components/card-list/card.tsx","components/card-list/index.tsx","section/body.tsx","App.tsx","modules/util/string.ts","modules/store/model/artwork.ts","modules/store/reducer/artwork.ts","modules/store/reducer/index.ts","modules/api-handler/model/artwork-data.ts","modules/api-handler/artwork.ts","modules/store/action/loading.ts","modules/store/action/error.ts","modules/store/saga/network.ts","modules/store/saga/index.ts","modules/store/index.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","type","action","initialize","createAction","initializeSuccess","initializeFailure","insert","delete","useArtwork","state","useSelector","root","artkworkReducer","dispatch","useDispatch","items","useMemo","get","getItems","useCallback","toJS","getItemFromIndex","index","artworkAction","path","artworks","customError","getWorkList","id","title","message","customLoading","deepFreeze","target","newObj","Object","entries","forEach","key","value","CONFIG","mode","subTitle","resizeWait","artworkImprotDateTimezone","artworkImportDateFromat","artworkViewDateFormat","artworkDefaultType","artworkDefaultTitle","artworkDefaultDate","artworkDefaultCreator","artworkDefaultDescription","artworkDefaultPath","cardListGap","thumbnailRate","windowLarge","windowMedium","windowRegular","windowSmall","girdCntLarge","gridCntMedium","gridCntRegular","gridCntSmall","gridCntDefault","PATH","ERROR","error","LOADING","loading","cxTypo","classNames","bind","styleTypo","cxHeader","styleHeader","Header","className","titleClassName","subTitleClassName","useDynamicGrid","girdWidth","useState","document","body","clientWidth","stageWidth","setStageWidth","columnCnt","columnSize","layout","list","Array","x","i","List","useEffect","resize","window","addEventListener","removeEventListener","useResizeDetector","ref","skipOnMount","skipResize","useRef","resizeHandler","width","undefined","height","size","setSize","resizeCallback","entry","contentRect","current","Math","round","debounce","reszieObserver","ResizeObserver","observe","disconnect","cancel","Heap","comp","_items","_comp","this","length","a","b","temp","item","push","parentIndex","getParentIndex","swap","pop","peak","leftIndex","getLeftChildIndex","rightIndex","getRightChildIndex","floor","cxCardList","styleCardList","Thumbnail","src","alt","style","fromArtworkData","str","moment","tz","Content","date","creator","description","subClassName","descClassNAme","dateStr","local","format","getLocaleTimeStr","Keyword","words","buttonClassName","$words","map","word","Card","draw","opts","y","$card","cardType","transform","onClick","open","focus","data-card-type","role","tabIndex","onKeyPress","thumbnail","keyword","INVISIBEL_X","INVISIBEL_Y","CardList","grid","artwork","viewItems","columns","heap","createCompFunc","$visibleCards","setVisibleCards","setStyle","claer","fill","_","add","$newVisibleCards","from","column","poll","max","Number","isFinite","readyToDraw","$hiddenCards","cxBody","styleBody","Body","$body","cxBase","styleBase","App","UPPER","LOWER","NUMBER","makeRandomStr","upper","lower","chars","charSize","charAt","random","join","ArtworkRecord","Record","createInitialState","isLoaded","converData","data","Artwork","isArray","reducer","createReducer","handleAction","payload","set","splice","rootReducer","combineReducers","ArtworkData","_id","_type","_title","_date","_creator","_description","_keyword","_path","_thumbnail","getDataList","axios","then","res","row","occur","release","callGetArtworkList$","networkSaga","put","loadingAction","call","console","errorAction","all","takeLatest","rootSaga","fork","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e40c01a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"card-list_list__rv1U6\",\"card\":\"card-list_card__2sDqc\",\"content\":\"card-list_content__bOM2M\",\"thumbnail\":\"card-list_thumbnail__3bwO4\",\"keywords\":\"card-list_keywords__3bqL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline-3\":\"typography_headline-3__2mH8o\",\"headline-4\":\"typography_headline-4__2c03k\",\"headline-5\":\"typography_headline-5__2Flpq\",\"headline-6\":\"typography_headline-6__2clj6\",\"subtitle-1\":\"typography_subtitle-1__3lYD6\",\"subtitle-2\":\"typography_subtitle-2__3jTD2\",\"body-1\":\"typography_body-1__3R42o\",\"body-2\":\"typography_body-2__1QjLB\",\"button\":\"typography_button__NOuYA\",\"caption\":\"typography_caption__UXXWJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"base_App__30SEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__4KjGi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"body_body__3uDPg\"};","import { createAction, ActionType } from 'typesafe-actions';\nimport ArtworkData from 'modules/api-handler/model/artwork-data';\n\nexport const type = {\n  INITIALIZE: 'artwork/INITIALIZE',\n  INITIALIZE_SUCCESS: 'artwork/INITIALIZE_SUCCESS',\n  INITIALIZE_FAILURE: 'artwork/INITIALIZE_FAILURE',\n  INSERT: 'artwork/INSERT',\n  DELETE: 'artwork/DELETE',\n};\n\nexport const action = {\n  initialize: createAction(type.INITIALIZE)(),\n  initializeSuccess: createAction(type.INITIALIZE_SUCCESS)<ArtworkData[]>(),\n  initializeFailure: createAction(type.INITIALIZE_FAILURE)<null>(),\n  insert: createAction(type.INSERT)<ArtworkData>(),\n  delete: createAction(type.DELETE)<number>(),\n};\n\nexport type Initialize = ActionType<typeof action.initialize>;\nexport type InitializeSuccess = ActionType<typeof action.initializeSuccess>;\nexport type InitializeFailure = ActionType<typeof action.initializeFailure>;\nexport type Insert = ActionType<typeof action.insert>;\nexport type Delete = ActionType<typeof action.delete>;\n\nexport type Action = ActionType<typeof action>;\n","import { useMemo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootReducer } from 'modules/store/reducer';\nimport { action as artworkAction } from 'modules/store/action/artwork';\nimport { ArtworkJS } from 'modules/store/model/artwork';\n\nfunction useArtwork() {\n  const state = useSelector((root: RootReducer) => root.artkworkReducer);\n  const dispatch = useDispatch();\n\n  const items = useMemo(() => state.get('items'), [state]);\n\n  // 아이템들을 자바스크립트 객체로 변환해서 반환합니다.\n  const getItems = useCallback((): ArtworkJS[] => items.toJS(), [items]);\n\n  // 인덱스에 해달하는 아이템을 자바스크립트 객체로 변환하여 반환합니다.\n  const getItemFromIndex = useCallback(\n    (index): ArtworkJS | undefined => items.get(index)?.toJS(),\n    [items],\n  );\n\n  // Artwrk 리덕스 모델을 초기화합니다.\n  const initialize = useCallback(() => {\n    dispatch(artworkAction.initialize());\n  }, []);\n\n  return {\n    getItems,\n    getItemFromIndex,\n    initialize,\n  };\n}\n\nexport default useArtwork;\n","const path: Path = {\n  artworks: '/artworks',\n};\n\nexport interface Path {\n  artworks: string;\n}\n\nexport default path;\n","const customError: CustomError = {\n  getWorkList: {\n    id: 10,\n    title: '네트워트 오류',\n    message: '네트워크 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',\n  },\n};\n\nexport interface CustomErrorData {\n  id: number;\n  title: string;\n  message: string;\n}\n\nexport interface CustomError {\n  getWorkList: CustomErrorData;\n}\n\nexport default customError;\n","const customLoading: CustomLoading = {\n  getWorkList: {\n    id: 10,\n    message: '작품 목록을 가져오고 있습니다.',\n  },\n};\n\nexport interface CustomLoadingData {\n  id: number;\n  message: string;\n}\n\nexport interface CustomLoading {\n  getWorkList: CustomLoadingData;\n}\n\nexport default customLoading;\n","import config, { Config } from 'constant/config';\nimport path, { Path } from 'constant/path';\nimport error, { CustomError } from 'constant/error';\nimport loading, { CustomLoading } from 'constant/loading';\n\nconst deepFreeze = (target: unknown) => {\n  if (target && typeof target === 'object') {\n    const newObj: { [key: string]: unknown } = {};\n\n    Object.entries(target).forEach(([key, value]) => {\n      newObj[key] = deepFreeze(value);\n    });\n\n    return newObj;\n  }\n\n  return target;\n};\n\nexport const CONFIG = deepFreeze(config) as Config;\nexport const PATH = deepFreeze(path) as Path;\nexport const ERROR = deepFreeze(error) as CustomError;\nexport const LOADING = deepFreeze(loading) as CustomLoading;\n","const config: Config = {\n  mode: 'production',\n  title: '8ight6ix',\n  subTitle: 'Artowrk Hub',\n  resizeWait: 0,\n\n  artworkImprotDateTimezone: 'Asia/Seoul', // 작품 로우 데이터 터임존\n  artworkImportDateFromat: 'YYYY.M.D', // 작품 로우 데이터 터임 포멧\n  artworkViewDateFormat: 'YYYY. MM. DD', // 화면에 보여지는 작품 데이터 타임 포멧\n\n  artworkDefaultType: '미정', // 작품 지폴트 타입\n  artworkDefaultTitle: '무제', // 작품 디폴트 제목\n  artworkDefaultDate: '0000.0.0', // 작품 디폰트 제작 시기\n  artworkDefaultCreator: '작가 미상', // 작품 디폴트 작가\n  artworkDefaultDescription: '설명 없음', // 작품 디폴트 설명\n  artworkDefaultPath: '/src/artworks/404.html', // 작품 폴트 경로\n\n  cardListGap: 20, // 카드 간격\n  thumbnailRate: 1.6, // Thumbnail 가로 세로 비율\n\n  windowLarge: 1440,\n  windowMedium: 1240,\n  windowRegular: 905,\n  windowSmall: 600,\n\n  girdCntLarge: 4,\n  gridCntMedium: 3,\n  gridCntRegular: 2,\n  gridCntSmall: 2,\n  gridCntDefault: 1,\n};\n\nexport interface Config {\n  mode: 'production' | 'development';\n  title: string;\n  subTitle: string;\n  resizeWait: number;\n\n  artworkImprotDateTimezone: string;\n  artworkImportDateFromat: string;\n  artworkViewDateFormat: string;\n\n  artworkDefaultType: string;\n  artworkDefaultTitle: string;\n  artworkDefaultDate: string;\n  artworkDefaultCreator: string;\n  artworkDefaultDescription: string;\n  artworkDefaultPath: string;\n\n  cardListGap: number;\n  thumbnailRate: number;\n\n  windowLarge: number;\n  windowMedium: number;\n  windowRegular: number;\n  windowSmall: number;\n\n  girdCntLarge: number;\n  gridCntMedium: number;\n  gridCntRegular: number;\n  gridCntSmall: number;\n  gridCntDefault: number;\n}\n\nexport default config;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { CONFIG } from 'constant';\nimport styleTypo from 'styles/base/typography.module.scss';\nimport styleHeader from 'styles/layout/header.module.scss';\n\nconst cxTypo = classNames.bind(styleTypo);\nconst cxHeader = classNames.bind(styleHeader);\n\nfunction Header() {\n  const className = useMemo(() => cxHeader('header'), []);\n\n  const title = useMemo(() => CONFIG.title, []);\n  const titleClassName = useMemo(() => cxTypo('headline-6'), []);\n\n  const subTitle = useMemo(() => CONFIG.subTitle, []);\n  const subTitleClassName = useMemo(() => cxTypo('subtitle-1'), []);\n\n  return (\n    <div className={className}>\n      <div id=\"wrapper\">\n        <p id=\"title\" className={titleClassName}>\n          {title}\n        </p>\n        <p id=\"sub-title\" className={subTitleClassName}>\n          {subTitle}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import { useEffect, useState, useMemo } from 'react';\nimport { List } from 'immutable';\n\nimport { CONFIG } from 'constant';\n\ninterface useDynamicGridProps {\n  girdWidth: number | undefined;\n}\n\nfunction useDynamicGrid({ girdWidth = 0 }: useDynamicGridProps) {\n  const [stageWidth, setStageWidth] = useState(document.body.clientWidth);\n\n  const columnCnt = useMemo(() => {\n    if (girdWidth === 0) return 0;\n    if (stageWidth >= CONFIG.windowLarge) return CONFIG.girdCntLarge;\n    if (stageWidth >= CONFIG.windowMedium) return CONFIG.gridCntMedium;\n    if (stageWidth >= CONFIG.windowRegular) return CONFIG.gridCntRegular;\n    if (stageWidth >= CONFIG.windowSmall) return CONFIG.gridCntSmall;\n    return CONFIG.gridCntDefault;\n  }, [stageWidth, girdWidth]);\n\n  const columnSize = useMemo(() => {\n    if (columnCnt === 0) return 0;\n    const valid = girdWidth - CONFIG.cardListGap * (columnCnt + 1);\n    return valid / columnCnt;\n  }, [columnCnt, girdWidth]);\n\n  const layout = useMemo(() => {\n    const list = Array(columnCnt);\n    let x = CONFIG.cardListGap;\n\n    for (let i = 0; i < columnCnt; i += 1) {\n      list[i] = x;\n      x += columnSize + CONFIG.cardListGap;\n    }\n\n    return List(list);\n  }, [columnCnt, columnSize]);\n\n  // Window 사이즈가 변하면 그리스 시스템을 리사이즈합니다.\n  useEffect(() => {\n    const resize = () => {\n      setStageWidth(document.body.clientWidth);\n    };\n    window.addEventListener('resize', resize);\n    return () => window.removeEventListener('resize', resize);\n  }, []);\n\n  return {\n    stageWidth,\n    columnCnt,\n    columnSize,\n    layout,\n  };\n}\n\nexport default useDynamicGrid;\n","import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport debounce from 'lodash.debounce';\n\nimport { CONFIG } from 'constant';\n\ninterface UseResizeDetector {\n  skipOnMount: boolean;\n  ref: React.RefObject<Element | null>;\n}\n\ninterface SizeData {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nfunction useResizeDetector({ ref, skipOnMount }: UseResizeDetector) {\n  const skipResize = useRef<boolean>(skipOnMount);\n  const resizeHandler = useRef<ReturnType<typeof debounce>>();\n  const [size, setSize] = useState<SizeData>({\n    width: undefined,\n    height: undefined,\n  });\n\n  const resizeCallback = useCallback<ResizeObserverCallback>(\n    (entries) =>\n      entries.forEach((entry) => {\n        const { width, height } = entry.contentRect ?? {};\n        if (skipResize.current) skipResize.current = false;\n        else setSize({ width: Math.round(width), height: Math.round(height) });\n      }),\n    [],\n  );\n\n  useEffect(() => {\n    resizeHandler.current = debounce(resizeCallback, CONFIG.resizeWait);\n    const reszieObserver = new ResizeObserver(resizeHandler.current);\n    if (ref.current) reszieObserver.observe(ref.current);\n\n    return () => {\n      reszieObserver.disconnect();\n      resizeHandler.current?.cancel();\n    };\n  }, [ref.current]);\n\n  return size;\n}\n\nexport default useResizeDetector;\n","class Heap<Type> {\n  private _items: Type[] = [];\n\n  private _comp: (a: Type, b: Type) => boolean;\n\n  constructor(comp: (a: Type, b: Type) => boolean) {\n    this._comp = comp;\n  }\n\n  get size() {\n    return this._items.length;\n  }\n\n  static getParentIndex(index: number) {\n    return Math.floor((index - 1) / 2);\n  }\n\n  static getLeftChildIndex(index: number) {\n    return index * 2 + 1;\n  }\n\n  static getRightChildIndex(index: number) {\n    return index * 2 + 2;\n  }\n\n  claer() {\n    this._items = [];\n  }\n\n  swap(a: number, b: number) {\n    const temp = this._items[a];\n    this._items[a] = this._items[b];\n    this._items[b] = temp;\n  }\n\n  peak() {\n    return this._items[0];\n  }\n\n  add(item: Type) {\n    let index = this._items.push(item) - 1;\n    let parentIndex = Heap.getParentIndex(index);\n\n    while (\n      parentIndex >= 0 &&\n      this._comp(this._items[index], this._items[parentIndex])\n    ) {\n      this.swap(index, parentIndex);\n      index = parentIndex;\n      parentIndex = Heap.getParentIndex(index);\n    }\n  }\n\n  poll() {\n    if (this.size < 2) return this._items.pop();\n\n    const item = this.peak();\n    this._items[0] = this._items.pop() as Type;\n\n    let index = 0;\n    let leftIndex = Heap.getLeftChildIndex(index);\n    let rightIndex = Heap.getRightChildIndex(index);\n\n    while (leftIndex < this.size) {\n      const target =\n        rightIndex < this.size &&\n        this._comp(this._items[rightIndex], this._items[leftIndex])\n          ? rightIndex\n          : leftIndex;\n\n      if (this._comp(this._items[index], this._items[target])) break;\n      this.swap(index, target);\n\n      index = target;\n      leftIndex = Heap.getLeftChildIndex(index);\n      rightIndex = Heap.getRightChildIndex(index);\n    }\n\n    return item;\n  }\n}\n\nexport default Heap;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames/bind';\nimport { CONFIG } from 'constant';\n\nimport styleCardList from 'styles/component/card-list.module.scss';\n\nconst cxCardList = classNames.bind(styleCardList);\n\ninterface ThumbnailProps {\n  title: string;\n  width: number;\n  src: string;\n}\n\nfunction Thumbnail({ title, width, src }: ThumbnailProps) {\n  const alt = useMemo(() => `${title} thumbnail image`, []);\n  const height = useMemo(() => width / CONFIG.thumbnailRate, [width]);\n  const style = useMemo(() => ({ width, height }), [height]);\n  const className = useMemo(() => cxCardList('thumbnail'), []);\n\n  return (\n    <div className={className} style={style}>\n      <img src={src} alt={alt} />\n    </div>\n  );\n}\n\nexport default Thumbnail;\n","import moment from 'moment-timezone';\nimport { CONFIG } from 'constant';\n\nexport const fromArtworkData = (str: string) => {\n  return moment.tz(\n    str,\n    CONFIG.artworkImportDateFromat,\n    CONFIG.artworkImprotDateTimezone,\n  );\n};\n\nexport const getLocaleTimeStr = (date: moment.Moment) => {\n  return date.local().format(CONFIG.artworkViewDateFormat);\n};\n","import React, { useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport classNames from 'classnames/bind';\n\nimport styleTypo from 'styles/base/typography.module.scss';\nimport styleCardList from 'styles/component/card-list.module.scss';\nimport { getLocaleTimeStr } from 'modules/util/date';\n\nconst cxCardList = classNames.bind(styleCardList);\nconst cxTypo = classNames.bind(styleTypo);\n\ninterface ContentProps {\n  title: string;\n  date: moment.Moment;\n  creator: string;\n  description: string;\n}\n\nfunction Content({ title, date, creator, description }: ContentProps) {\n  const className = useMemo(() => cxCardList('content'), []);\n\n  const titleClassName = useMemo(() => cxTypo('headline-6'), []);\n  const subClassName = useMemo(() => cxTypo('cpation'), []);\n  const descClassNAme = useMemo(() => cxTypo('body-1'), []);\n\n  const dateStr = useMemo(() => getLocaleTimeStr(date), []);\n\n  return (\n    <div className={className}>\n      <p id=\"title\" className={titleClassName}>\n        {title}\n      </p>\n      <p id=\"sub\" className={subClassName}>\n        {dateStr}\n        <br />\n        {creator}\n      </p>\n      <p id=\"desc\" className={descClassNAme}>\n        {description}\n      </p>\n    </div>\n  );\n}\n\nexport default Content;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames/bind';\n\nimport styleTypo from 'styles/base/typography.module.scss';\nimport styleCardList from 'styles/component/card-list.module.scss';\n\nconst cxCardList = classNames.bind(styleCardList);\nconst cxTypo = classNames.bind(styleTypo);\n\ninterface KeywordProps {\n  words: string[];\n}\n\nfunction Keyword({ words }: KeywordProps) {\n  const className = useMemo(() => cxCardList('keywords'), []);\n  const buttonClassName = useMemo(() => cxTypo('button'), []);\n\n  const $words = useMemo(() => {\n    return words.map((word) => (\n      <span key={word} className={buttonClassName}>\n        {word}\n      </span>\n    ));\n  }, [words, buttonClassName]);\n\n  return (\n    <div className={className}>\n      <hr />\n      {$words}\n    </div>\n  );\n}\n\nexport default Keyword;\n","/* eslint-disable react/require-default-props */\n\nimport React, { useMemo, useRef, useEffect, useCallback } from 'react';\nimport classNames from 'classnames/bind';\n\nimport { ArtworkJS } from 'modules/store/model/artwork';\nimport useResizeDetector from 'modules/hook/useResizeDetector';\nimport styleCardList from 'styles/component/card-list.module.scss';\nimport Thumbnail from 'components/card-list/thumbnail';\nimport Content from 'components/card-list/content';\nimport Keyword from 'components/card-list/keywords';\n\nconst cxCardList = classNames.bind(styleCardList);\n\ninterface CardProps {\n  draw?: (index: number, height: number) => void;\n  index: number;\n  opts: ArtworkJS;\n  width: number;\n  x: number;\n  y: number;\n}\n\nfunction Card({ draw, index, opts, width, x, y }: CardProps) {\n  const className = useMemo(() => cxCardList('card', 'view'), []);\n  const $card = useRef<HTMLDivElement>(null);\n\n  const cardType = useMemo(() => {\n    return !draw && width ? 'visible' : 'hidden';\n  }, [draw, width]);\n  const style = useMemo(() => {\n    return { width, transform: `translate(${x}px, ${y}px)` };\n  }, [width, x, y]);\n\n  const { height } = useResizeDetector({ ref: $card, skipOnMount: !draw });\n\n  // 높이 측정용 Componenet의 설정이 변하면 draw를 요청합니다.\n  useEffect(() => {\n    if (draw && width && height) draw(index, height ?? 0);\n  }, [x, y, height]);\n\n  const onClick = useCallback(() => {\n    window.open(opts.path, '_blank')?.focus();\n  }, []);\n\n  return (\n    <div\n      data-card-type={cardType}\n      ref={$card}\n      className={className}\n      style={style}\n      role=\"button\"\n      tabIndex={0}\n      onClick={onClick}\n      onKeyPress={onClick}\n    >\n      <Thumbnail title={opts.title} width={width} src={opts.thumbnail} />\n      <Content\n        title={opts.title}\n        date={opts.date}\n        creator={opts.creator}\n        description={opts.description}\n      />\n      <Keyword words={opts.keyword} />\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport classNames from 'classnames/bind';\nimport { List } from 'immutable';\n\nimport { CONFIG } from 'constant';\nimport Heap from 'modules/util/heap';\nimport useArtwork from 'modules/hook/useArtwork';\nimport Card from 'components/card-list/card';\nimport styleCardList from 'styles/component/card-list.module.scss';\n\nconst cxCardList = classNames.bind(styleCardList);\n\ninterface CardListProps {\n  grid: List<number>;\n  columnSize: number;\n  columnCnt: number;\n}\n\ninterface ViewItems {\n  [index: number]: number;\n  length: number;\n}\n\nconst INVISIBEL_X = -99999;\nconst INVISIBEL_Y = -99999;\n\nconst createCompFunc = (columns: number[]) => (a: number, b: number) => {\n  if (columns[a] === columns[b]) return a < b;\n  return columns[a] < columns[b];\n};\n\nfunction CardList({ grid, columnSize, columnCnt }: CardListProps) {\n  const className = useMemo(() => cxCardList('list'), []);\n  const artwork = useArtwork();\n\n  const items = useMemo(() => artwork.getItems(), [artwork.getItems]); // 전체 카드 데이터\n  const viewItems = useMemo<ViewItems>(\n    () => ({ length: 0 }),\n    [grid, columnSize, columnCnt, items],\n  ); // 화면에 그려지질 카드 데이터\n\n  const columns = useMemo<number[]>(() => Array(columnCnt), [columnCnt]); // 각 Columns의 현재 높이를 저장\n  const heap = useMemo(() => new Heap(createCompFunc(columns)), [columns]); // 가장 낮은 높이의 Cloumn을 찾기위한 힙\n\n  const [$visibleCards, setVisibleCards] = useState<JSX.Element[]>([]); // 화면에 보여지는 카드 컴포넌트 리스트\n  const [style, setStyle] = useState({ height: 0 }); // 카드 리스트 스타일\n\n  // 화면에 카드를 그리는 함수입니다.\n  const draw = useCallback(() => {\n    heap.claer();\n    columns.fill(0).forEach((_, i) => heap.add(i));\n\n    const $newVisibleCards = Array.from(viewItems).map((height, index) => {\n      const item = items[index];\n      const column = heap.poll() as number;\n      const x = grid.get(column) ?? INVISIBEL_X;\n      const y = columns[column] ?? INVISIBEL_Y;\n\n      columns[column] += height + CONFIG.cardListGap;\n      heap.add(column);\n\n      return (\n        <Card\n          key={`visible-${item.id}`}\n          index={index}\n          opts={item}\n          width={columnSize}\n          x={x}\n          y={y}\n        />\n      );\n    });\n\n    const height = Math.max(...columns) - CONFIG.cardListGap;\n    setVisibleCards($newVisibleCards);\n    setStyle({ height: Number.isFinite(height) ? height : 0 });\n  }, [viewItems, columns, heap]);\n\n  // 화면에 그릴 카드 데이터를 준비하는 함수입니다.\n  const readyToDraw = useCallback(\n    (index: number, height: number) => {\n      if (viewItems[index] === undefined) viewItems.length += 1;\n      viewItems[index] = height;\n      if (viewItems.length === items.length) draw();\n    },\n    [viewItems, items, draw],\n  );\n\n  // 화면에 그릴 카드의 수치를 확인하기위해, 보이지 않는 카드를 생성합니다.\n  const $hiddenCards = useMemo<JSX.Element[]>(() => {\n    if (columnSize === 0) return [];\n    return items.map((item, index) => (\n      <Card\n        key={`hidden-${item.id}`}\n        draw={readyToDraw}\n        index={index}\n        opts={item}\n        width={columnSize}\n        x={INVISIBEL_X}\n        y={INVISIBEL_Y}\n      />\n    ));\n  }, [readyToDraw, columnSize]);\n\n  return (\n    <div className={className} style={style}>\n      {$hiddenCards}\n      {$visibleCards}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React, { useMemo, useRef } from 'react';\nimport classNames from 'classnames/bind';\n\nimport useDynamicGrid from 'modules/hook/useDynamicGrid';\nimport useResizeDetector from 'modules/hook/useResizeDetector';\nimport styleBody from 'styles/layout/body.module.scss';\nimport CardList from 'components/card-list';\n\nconst cxBody = classNames.bind(styleBody);\n\nfunction Body() {\n  const className = useMemo(() => cxBody('body'), []);\n  const $body = useRef<HTMLDivElement>(null);\n\n  const { width } = useResizeDetector({ ref: $body, skipOnMount: false });\n  const grid = useDynamicGrid({ girdWidth: width });\n\n  return (\n    <div ref={$body} className={className}>\n      <CardList\n        grid={grid.layout}\n        columnSize={grid.columnSize}\n        columnCnt={grid.columnCnt}\n      />\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { useEffect, useMemo } from 'react';\nimport classNames from 'classnames/bind';\n\nimport useArtwork from 'modules/hook/useArtwork';\nimport styleBase from 'styles/base/base.module.scss';\nimport Header from 'section/header';\nimport Body from 'section/body';\n\nconst cxBase = classNames.bind(styleBase);\n\nfunction App() {\n  const artwork = useArtwork();\n  const className = useMemo(() => cxBase('App'), []);\n\n  useEffect(() => {\n    artwork.initialize();\n  }, []);\n\n  return (\n    <div className={className}>\n      <Header />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","const UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst LOWER = 'abcdefghijklmnopqrstuvwxyz';\nconst NUMBER = '0123456789';\n\nexport const makeRandomStr = (size: number, upper = true, lower = true) => {\n  let chars = NUMBER;\n  if (upper) chars += UPPER;\n  if (lower) chars += LOWER;\n\n  const str = Array(size);\n  const charSize = chars.length;\n\n  for (let i = 0; i < size; i += 1) {\n    str[i] = chars.charAt(Math.floor(Math.random() * charSize));\n  }\n\n  return str.join('');\n};\n","import { Record, List } from 'immutable';\nimport moment from 'moment-timezone';\n\nimport { CONFIG } from 'constant';\nimport { fromArtworkData } from 'modules/util/date';\nimport { makeRandomStr } from 'modules/util/string';\n\nexport interface Artwork {\n  id: string;\n  type: string;\n  title: string;\n  date: moment.Moment;\n  creator: string;\n  description: string;\n  keyword: List<string>;\n  path: string;\n  thumbnail: string;\n}\n\nexport interface ArtworkJS {\n  id: string;\n  type: string;\n  title: string;\n  date: moment.Moment;\n  creator: string;\n  description: string;\n  keyword: string[];\n  path: string;\n  thumbnail: string;\n}\n\nexport type ArtworkType = Record<Artwork>;\n\nconst ArtworkRecord = Record<Artwork>({\n  id: makeRandomStr(12),\n  type: CONFIG.artworkDefaultType,\n  title: CONFIG.artworkDefaultTitle,\n  date: fromArtworkData(CONFIG.artworkDefaultDate),\n  creator: CONFIG.artworkDefaultDescription,\n  description: CONFIG.artworkDefaultDescription,\n  keyword: List(),\n  path: CONFIG.artworkDefaultPath,\n  thumbnail: '',\n});\n\nexport default ArtworkRecord;\n","import { createReducer } from 'typesafe-actions';\nimport { List, Record } from 'immutable';\n\nimport { action, Action } from 'modules/store/action/artwork';\nimport ArtworkData from 'modules/api-handler/model/artwork-data';\nimport Artwork, { ArtworkType } from 'modules/store/model/artwork';\nimport { fromArtworkData } from 'modules/util/date';\nimport { makeRandomStr } from 'modules/util/string';\n\nexport interface State {\n  isLoaded: boolean;\n  items: List<ArtworkType>;\n}\n\nconst createInitialState = Record<State>({\n  isLoaded: false,\n  items: List<ArtworkType>(),\n});\n\nconst converData = (data: ArtworkData) =>\n  Artwork({\n    id: data.id || makeRandomStr(12),\n    type: data.type,\n    title: data.title,\n    date: data.date ? fromArtworkData(data.date) : undefined,\n    creator: data.creator,\n    description: data.description,\n    keyword: Array.isArray(data.keyword) ? List(data.keyword) : undefined,\n    path: data.path,\n    thumbnail: data.thumbnail,\n  });\n\nconst reducer = createReducer<Record<State>, Action>(createInitialState())\n  .handleAction(action.initializeSuccess, (_, { payload }) => {\n    const items = List(payload.map(converData));\n    return createInitialState({ isLoaded: true, items });\n  })\n  .handleAction(action.initializeFailure, () => {\n    return createInitialState();\n  })\n  .handleAction(action.insert, (state, { payload }) => {\n    const item = converData(payload);\n    const items = state.get('items').push(item);\n    return state.set('items', items);\n  })\n  .handleAction(action.delete, (state, { payload }) => {\n    const items = state.get('items').splice(payload, 1);\n    return state.set('items', items);\n  });\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport artkworkReducer from 'modules/store/reducer/artwork';\n\nconst rootReducer = combineReducers({ artkworkReducer });\n\nexport default rootReducer;\nexport type RootReducer = ReturnType<typeof rootReducer>;\n","export interface RowData {\n  id: string;\n  type: string;\n  title: string;\n  date: string;\n  creator: string;\n  description: string;\n  keyword: string[];\n  path: string;\n  thumbnail: string;\n}\n\nclass ArtworkData {\n  private _id: string;\n\n  private _type: string;\n\n  private _title: string;\n\n  private _date: string;\n\n  private _creator: string;\n\n  private _description: string;\n\n  private _keyword: string[];\n\n  private _path: string;\n\n  private _thumbnail: string;\n\n  constructor(data: RowData) {\n    this._id = data.id;\n    this._type = data.type;\n    this._title = data.title;\n    this._date = data.date;\n    this._creator = data.creator;\n    this._description = data.description;\n    this._keyword = Array.isArray(data.keyword) ? [...data.keyword] : [];\n    this._path = data.path;\n    this._thumbnail = data.thumbnail;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get title() {\n    return this._title;\n  }\n\n  get date() {\n    return this._date;\n  }\n\n  get creator() {\n    return this._creator;\n  }\n\n  get description() {\n    return this._description;\n  }\n\n  get keyword() {\n    return [...this._keyword];\n  }\n\n  get path() {\n    return this._path;\n  }\n\n  get thumbnail() {\n    return this._thumbnail;\n  }\n}\n\nexport default ArtworkData;\n","import axios from 'axios';\n\nimport { PATH } from 'constant';\nimport ArtworkData, { RowData } from 'modules/api-handler/model/artwork-data';\n\nexport const getDataList = () =>\n  axios\n    .get<RowData[]>(`${PATH.artworks}/index.json`)\n    .then((res) => res.data.map((row) => new ArtworkData(row)));\n","import { createAction, ActionType } from 'typesafe-actions';\nimport { CustomLoadingData } from 'constant/loading';\n\nexport const type = {\n  OCCUR: 'loading/OCCUR',\n  RELEASE: 'loading/RELEASE',\n};\n\nexport const action = {\n  occur: createAction(type.OCCUR)<CustomLoadingData>(),\n  release: createAction(type.RELEASE)(),\n};\n\nexport type Occur = ActionType<typeof action.occur>;\nexport type Release = ActionType<typeof action.release>;\n\nexport type Action = ActionType<typeof action>;\n","import { createAction, ActionType } from 'typesafe-actions';\nimport { CustomErrorData } from 'constant/error';\n\nexport const type = {\n  OCCUR: 'error/OCCUR',\n  RELEASE: 'error/release',\n};\n\nexport const action = {\n  occur: createAction(type.OCCUR)<CustomErrorData>(),\n  release: createAction(type.RELEASE)(),\n};\n\nexport type Occur = ActionType<typeof action.occur>;\nexport type Release = ActionType<typeof action.release>;\n\nexport type Action = ActionType<typeof action>;\n","import { all, call, put, takeLatest } from 'redux-saga/effects';\n\nimport { CONFIG, LOADING, ERROR } from 'constant';\nimport { getDataList } from 'modules/api-handler/artwork';\nimport ArtworkData from 'modules/api-handler/model/artwork-data';\n\nimport * as loadingAction from 'modules/store/action/loading';\nimport * as errorAction from 'modules/store/action/error';\nimport * as artworkAction from 'modules/store/action/artwork';\n\n/**\n * @description 작품 정보 리스트를 가져옵니다.\n */\nfunction* callGetArtworkList$() {\n  yield put(loadingAction.action.occur(LOADING.getWorkList));\n\n  try {\n    const res: ArtworkData[] = yield call(getDataList);\n    yield put(artworkAction.action.initializeSuccess(res));\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    if (CONFIG.mode === 'development') console.error(e);\n\n    yield put(errorAction.action.occur(ERROR.getWorkList));\n    yield put(artworkAction.action.initializeFailure(null));\n  }\n\n  yield put(loadingAction.action.release());\n}\n\nfunction* networkSaga() {\n  yield all([takeLatest(artworkAction.type.INITIALIZE, callGetArtworkList$)]);\n}\n\nexport default networkSaga;\n","import { all, fork } from 'redux-saga/effects';\nimport networkSaga from 'modules/store/saga/network';\n\nfunction* rootSaga() {\n  yield all([fork(networkSaga)]);\n}\n\nexport default rootSaga;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n\nimport { compose, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { CONFIG } from 'constant';\nimport rootReducer from 'modules/store/reducer';\nimport rootSaga from 'modules/store/saga';\n\n// Redux Devtool Global Type 설정\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\n// 개발 환경에서 Redux Devtool을 사용\nconst composeEnhancer =\n  CONFIG.mode === 'development'\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n    : compose;\n\nfunction configureStore() {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    composeEnhancer(applyMiddleware(sagaMiddleware)),\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept('./reducer', () =>\n      store.replaceReducer(require('./reducer').default),\n    );\n  }\n\n  return store;\n}\n\nexport default configureStore;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from 'App';\n\nimport configureStore from 'modules/store';\nimport reportWebVitals from 'reportWebVitals';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}